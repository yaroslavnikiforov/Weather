{"version":3,"sources":["components/Titles/index.js","components/Form/index.js","components/Weather/index.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Form","_ref","onSubmit","type","name","placeholder","Weather","conditions","temperature","city","country","humidity","description","error","Math","round","API_KEY","App","state","_getWeather","_callee","e","apiCall","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","console","info","fetch","concat","sent","json","cod","_this","setState","main","temp","sys","weather","_resetState","message","stop","errorMessage","undefined","components_Titles","components_Form","this","components_Weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sTAaeA,SAVA,kBACbC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAd,kBAEAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAAb,mDCWWC,SAdF,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACXN,EAAAC,EAAAC,cAAA,QAAMI,SAAUA,GACdN,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAE3CT,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAE9CT,EAAAC,EAAAC,cAAA,UAAQK,KAAK,UAAb,kBC6CWG,SAnDC,SAAAL,GAAoB,IAAjBM,EAAiBN,EAAjBM,WAEfC,EAMED,EANFC,YACAC,EAKEF,EALFE,KACAC,EAIEH,EAJFG,QACAC,EAGEJ,EAHFI,SACAC,EAEEL,EAFFK,YACAC,EACEN,EADFM,MAGF,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACZU,GAAQC,GACPd,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,YACY,IACVH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBACbU,EADH,KACWC,IAKdF,GACCZ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,eACe,IACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBACbe,KAAKC,MAAMP,GAAe,WAKhCG,GACCf,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,aACYH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAkBY,EAAW,OAI1DC,GACChB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,eACcH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAkBa,IAIjDC,GAASjB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAkBc,MCzCzCG,EAAU,mCAuEDC,6MApEbC,MAAQ,KAoBRC,kDAAc,SAAAC,EAAMC,GAAN,IAAAZ,EAAAC,EAAAY,EAAAC,EAAA,OAAAC,EAAA3B,EAAA4B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACZP,EAAEQ,iBAEIpB,EAAOY,EAAES,OAAOC,SAAStB,KAAKuB,MAC9BtB,EAAUW,EAAES,OAAOC,SAASrB,QAAQsB,MAE1CC,QAAQC,KAAK,SAAUzB,GACvBwB,QAAQC,KAAK,YAAaxB,GAPdgB,EAAAE,KAAA,EASUO,MAAK,qDAAAC,OAC4B3B,EAD5B,KAAA2B,OACoC1B,EADpC,WAAA0B,OACqDpB,EADrD,kBATf,cASNM,EATMI,EAAAW,KAAAX,EAAAE,KAAA,GAaON,EAAQgB,OAbf,QAaNf,EAbMG,EAAAW,KAeZJ,QAAQC,KAAK,SAAUX,GAEnBd,GAAQC,GAAWa,GACJ,MAAbA,EAAKgB,KACPC,EAAKC,SAAS,CACZjC,YAAae,EAAKmB,KAAKC,KACvBlC,KAAMc,EAAKnB,KACXM,QAASa,EAAKqB,IAAIlC,QAClBC,SAAUY,EAAKmB,KAAK/B,SACpBC,YAAaW,EAAKsB,QAAQ,GAAGjC,YAC7BC,MAAO,KAIM,MAAbU,EAAKgB,KACPC,EAAKM,YAAYvB,EAAKwB,UAGxBP,EAAKM,YAAY,iCAjCP,yBAAApB,EAAAsB,SAAA5B,8DAqCd0B,YAAc,SAAAG,GAAY,OACxBT,EAAKC,SAAS,CACZjC,iBAAa0C,EACbzC,UAAMyC,EACNxC,aAASwC,EACTvC,cAAUuC,EACVtC,iBAAasC,EACbrC,MAAOoC,6EA7DT,OACErD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCACbH,EAAAC,EAAAC,cAACqD,EAAD,OAGFvD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sCACbH,EAAAC,EAAAC,cAACsD,EAAD,CAAMlD,SAAUmD,KAAKlC,cAErBvB,EAAAC,EAAAC,cAACwD,EAAD,CAAS/C,WAAY8C,KAAKnC,kBAdpBqC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECXNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.06ac8daf.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles.scss\";\n\nconst Titles = () => (\n  <div className=\"titles\">\n    <h1 className=\"titles__title\">Weather Finder</h1>\n\n    <p className=\"titles__subtitle\">\n      Find out temperature, conditions and more...\n    </p>\n  </div>\n);\n\nexport default Titles;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./styles.scss\";\n\nconst Form = ({ onSubmit }) => (\n  <form onSubmit={onSubmit}>\n    <input type=\"text\" name=\"city\" placeholder=\"City...\" />\n\n    <input type=\"text\" name=\"country\" placeholder=\"Country...\" />\n\n    <button type=\"submit\">Get weather</button>\n  </form>\n);\n\nForm.propTypes = {\n  onSubmit: PropTypes.func\n};\n\nexport default Form;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./styles.scss\";\n\nconst Weather = ({ conditions }) => {\n  const {\n    temperature,\n    city,\n    country,\n    humidity,\n    description,\n    error\n  } = conditions;\n\n  return (\n    <div className=\"weather\">\n      {city && country && (\n        <p className=\"weather__key\">\n          Location:{\" \"}\n          <span className=\"weather__value\">\n            {city}, {country}\n          </span>\n        </p>\n      )}\n\n      {temperature && (\n        <p className=\"weather__key\">\n          Temperature:{\" \"}\n          <span className=\"weather__value\">\n            {Math.round(temperature) + \" Â°C\"}\n          </span>\n        </p>\n      )}\n\n      {humidity && (\n        <p className=\"weather__key\">\n          Humidity: <span className=\"weather__value\">{humidity + \" %\"}</span>\n        </p>\n      )}\n\n      {description && (\n        <p className=\"weather__key\">\n          Conditions: <span className=\"weather__value\">{description}</span>\n        </p>\n      )}\n\n      {error && <p className=\"weather__error\">{error}</p>}\n    </div>\n  );\n};\n\nWeather.propTypes = {\n  conditions: PropTypes.object\n};\n\nexport default Weather;\n","import React, { Component } from \"react\";\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY = \"ca35b23530021d4b508171f1a5f0ba0a\";\n\nclass App extends Component {\n  state = {};\n\n  render() {\n    return (\n      <div className=\"app container\">\n        <div className=\"app__wrapper row\">\n          <div className=\"col-lg-5 col-sm-5 app__left-block\">\n            <Titles />\n          </div>\n\n          <div className=\"app__right-block col-sm-7 col-xl-7\">\n            <Form onSubmit={this._getWeather} />\n\n            <Weather conditions={this.state} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  _getWeather = async e => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    console.info(\"city: \", city);\n    console.info(\"country: \", country);\n\n    const apiCall = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`\n    );\n\n    const data = await apiCall.json();\n\n    console.info(\"data: \", data);\n\n    if (city && country && data) {\n      if (data.cod === 200) {\n        this.setState({\n          temperature: data.main.temp,\n          city: data.name,\n          country: data.sys.country,\n          humidity: data.main.humidity,\n          description: data.weather[0].description,\n          error: \"\"\n        });\n      }\n\n      if (data.cod === 404) {\n        this._resetState(data.message);\n      }\n    } else {\n      this._resetState(\"Please enter city and country\");\n    }\n  };\n\n  _resetState = errorMessage =>\n    this.setState({\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      error: errorMessage\n    });\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}